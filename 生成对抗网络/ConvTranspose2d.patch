--- d:\programdata\anaconda3\envs\torch4_py36\lib\site-packages\torch\nn\modules\conv.py
+++ d:\programdata\anaconda3\envs\torch4_py36\lib\site-packages\torch\nn\modules\conv.py
@@ -9,11 +9,11 @@
     * :attr:`stride` controls the stride for the cross-correlation.
 
     * :attr:`padding` controls the amount of implicit zero-paddings on both
-      sides for ``dilation * (kernel_size - 1) - padding`` number of points. See note
-      below for details.
+      sides for :attr:`padding` number of points for each dimension.
 
-    * :attr:`output_padding` controls the additional size added to one side
-      of the output shape. See note below for details.
+    * :attr:`output_padding` controls the amount of implicit zero-paddings on
+      both sides of the output for :attr:`output_padding` number of points for
+      each dimension.
 
     * :attr:`dilation` controls the spacing between the kernel points; also known as the ид trous algorithm.
       It is harder to describe, but this `link`_ has a nice visualization of what :attr:`dilation` does.
@@ -29,7 +29,7 @@
           concatenated.
         * At groups= :attr:`in_channels`, each input channel is convolved with
           its own set of filters (of size
-          :math:`\left\lfloor\frac{out\_channels}{in\_channels}\right\rfloor`).
+          :math:`\left\lfloor\frac{\text{out_channels}}{\text{in_channels}}\right\rfloor`).
 
     The parameters :attr:`kernel_size`, :attr:`stride`, :attr:`padding`, :attr:`output_padding`
     can either be:
@@ -46,25 +46,23 @@
          It is up to the user to add proper padding.
 
     .. note::
-        The :attr:`padding` argument effectively adds ``dilation * (kernel_size - 1) - padding``
+        The :attr:`padding` argument effectively adds ``kernel_size - 1 - padding``
         amount of zero padding to both sizes of the input. This is set so that
         when a :class:`~torch.nn.Conv2d` and a :class:`~torch.nn.ConvTranspose2d`
         are initialized with same parameters, they are inverses of each other in
-        regard to the input and output shapes. However, when ``stride > 1``,
+        regard to the input and output shapes. However, when :attr`stride` ``>1``,
         :class:`~torch.nn.Conv2d` maps multiple input shapes to the same output
         shape. :attr:`output_padding` is provided to resolve this ambiguity by
         effectively increasing the calculated output shape on one side. Note
         that :attr:`output_padding` is only used to find output shape, but does
         not actually add zero-padding to output.
 
-    .. include:: cudnn_deterministic.rst
-
     Args:
         in_channels (int): Number of channels in the input image
         out_channels (int): Number of channels produced by the convolution
         kernel_size (int or tuple): Size of the convolving kernel
         stride (int or tuple, optional): Stride of the convolution. Default: 1
-        padding (int or tuple, optional): ``dilation * (kernel_size - 1) - padding`` zero-padding
+        padding (int or tuple, optional): ``kernel_size - 1 - padding`` zero-padding
             will be added to both sides of each dimension in the input. Default: 0
         output_padding (int or tuple, optional): Additional size added to one side
             of each dimension in the output shape. Default: 0
@@ -76,24 +74,17 @@
         - Input: :math:`(N, C_{in}, H_{in}, W_{in})`
         - Output: :math:`(N, C_{out}, H_{out}, W_{out})` where
 
-        .. math::
-              H_{out} = (H_{in} - 1) \times \text{stride}[0] - 2 \times \text{padding}[0] + \text{dilation}[0]
-                        \times (\text{kernel\_size}[0] - 1) + \text{output\_padding}[0] + 1
-        .. math::
-              W_{out} = (W_{in} - 1) \times \text{stride}[1] - 2 \times \text{padding}[1] + \text{dilation}[1]
-                        \times (\text{kernel\_size}[1] - 1) + \text{output\_padding}[1] + 1
+          .. math::
+              H_{out} = (H_{in} - 1) * \text{stride}[0] - 2 * \text{padding}[0]
+                    + \text{kernel_size}[0] + \text{output_padding}[0]
+
+              W_{out} = (W_{in} - 1) * \text{stride}[1] - 2 * \text{padding}[1]
+                    + \text{kernel_size}[1] + \text{output_padding}[1]
 
     Attributes:
         weight (Tensor): the learnable weights of the module of shape
-                         :math:`(\text{in\_channels}, \frac{\text{out\_channels}}{\text{groups}},`
-                         :math:`\text{kernel\_size[0]}, \text{kernel\_size[1]})`.
-                         The values of these weights are sampled from
-                         :math:`\mathcal{U}(-\sqrt{k}, \sqrt{k})` where
-                         :math:`k = \frac{1}{C_\text{in} * \prod_{i=0}^{1}\text{kernel\_size}[i]}`
+                         (in_channels, out_channels, kernel_size[0], kernel_size[1])
         bias (Tensor):   the learnable bias of the module of shape (out_channels)
-                         If :attr:`bias` is ``True``, then the values of these weights are
-                         sampled from :math:`\mathcal{U}(-\sqrt{k}, \sqrt{k})` where
-                         :math:`k = \frac{1}{C_\text{in} * \prod_{i=0}^{1}\text{kernel\_size}[i]}`
 
     Examples::
 
@@ -122,8 +113,7 @@
     """
 
     def __init__(self, in_channels, out_channels, kernel_size, stride=1,
-                 padding=0, output_padding=0, groups=1, bias=True,
-                 dilation=1, padding_mode='zeros'):
+                 padding=0, output_padding=0, groups=1, bias=True, dilation=1):
         kernel_size = _pair(kernel_size)
         stride = _pair(stride)
         padding = _pair(padding)
@@ -131,15 +121,10 @@
         output_padding = _pair(output_padding)
         super(ConvTranspose2d, self).__init__(
             in_channels, out_channels, kernel_size, stride, padding, dilation,
-            True, output_padding, groups, bias, padding_mode)
+            True, output_padding, groups, bias)
 
     def forward(self, input, output_size=None):
-        # type: (Tensor, Optional[List[int]]) -> Tensor
-        if self.padding_mode != 'zeros':
-            raise ValueError('Only `zeros` padding mode is supported for ConvTranspose2d')
-
-        output_padding = self._output_padding(input, output_size, self.stride, self.padding, self.kernel_size)
-
+        output_padding = self._output_padding(input, output_size)
         return F.conv_transpose2d(
             input, self.weight, self.bias, self.stride, self.padding,
             output_padding, self.groups, self.dilation)